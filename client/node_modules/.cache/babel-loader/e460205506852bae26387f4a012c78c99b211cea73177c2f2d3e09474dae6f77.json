{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5002';\nexport const fetchData = async endpoint => {\n  const response = await fetch(`${API_URL}/${endpoint}`);\n  if (!response.ok) {\n    throw new Error('Erro ao buscar dados da API');\n  }\n  return response.json();\n};\nexport const login = async (email, password) => {\n  const response = await fetch(`${API_URL}/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Erro ao fazer login');\n  }\n  return response.json();\n};\nexport const fetchUserById = async id => {\n  const response = await fetch(`${API_URL}/users/${id}`);\n  if (!response.ok) {\n    throw new Error('Erro ao buscar usuário');\n  }\n  return response.json();\n};\nexport const updateUser = async (id, userData) => {\n  const response = await fetch(`${API_URL}/users/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  if (!response.ok) {\n    throw new Error('Erro ao atualizar usuário');\n  }\n  return response.json();\n};\nexport const fetchUsers = async () => {\n  const response = await fetch(`${API_URL}/users`);\n  if (!response.ok) {\n    throw new Error('Erro ao buscar usuários');\n  }\n  return response.json();\n};\nexport const deleteUser = async id => {\n  const response = await fetch(`${API_URL}/users/${id}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('Erro ao deletar usuário');\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","fetchData","endpoint","response","fetch","ok","Error","json","login","email","password","method","headers","body","JSON","stringify","fetchUserById","id","updateUser","userData","fetchUsers","deleteUser"],"sources":["C:/Users/Hígor Covre/Desktop/Projetos/meu-projeto/client/src/services/api.ts"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5002';\r\n\r\nexport const fetchData = async (endpoint: string) => {\r\n  const response = await fetch(`${API_URL}/${endpoint}`);\r\n  if (!response.ok) {\r\n    throw new Error('Erro ao buscar dados da API');\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const login = async (email: string, password: string) => {\r\n  const response = await fetch(`${API_URL}/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error('Erro ao fazer login');\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const fetchUserById = async (id: number) => {\r\n  const response = await fetch(`${API_URL}/users/${id}`);\r\n  if (!response.ok) {\r\n    throw new Error('Erro ao buscar usuário');\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const updateUser = async (id: number, userData: { name: string; email: string }) => {\r\n  const response = await fetch(`${API_URL}/users/${id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error('Erro ao atualizar usuário');\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const fetchUsers = async () => {\r\n  const response = await fetch(`${API_URL}/users`);\r\n  if (!response.ok) {\r\n    throw new Error('Erro ao buscar usuários');\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const deleteUser = async (id: number) => {\r\n  const response = await fetch(`${API_URL}/users/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error('Erro ao deletar usuário');\r\n  }\r\n  return response.json();\r\n};\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAExE,OAAO,MAAMC,SAAS,GAAG,MAAOC,QAAgB,IAAK;EACnD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,IAAIK,QAAQ,EAAE,CAAC;EACtD,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChD;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAK;EAC9D,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,QAAQ,EAAE;IAC/Cc,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEN,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EACF,IAAI,CAACP,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;EACxC;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMS,aAAa,GAAG,MAAOC,EAAU,IAAK;EACjD,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,UAAUoB,EAAE,EAAE,CAAC;EACtD,IAAI,CAACd,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMW,UAAU,GAAG,MAAAA,CAAOD,EAAU,EAAEE,QAAyC,KAAK;EACzF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,UAAUoB,EAAE,EAAE,EAAE;IACrDN,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,QAAQ;EAC/B,CAAC,CAAC;EACF,IAAI,CAAChB,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;EAC9C;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMa,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,QAAQ,CAAC;EAChD,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMc,UAAU,GAAG,MAAOJ,EAAU,IAAK;EAC9C,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,UAAUoB,EAAE,EAAE,EAAE;IACrDN,MAAM,EAAE;EACV,CAAC,CAAC;EACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}